"""
Django settings for brew_notifier project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import logging
import environ
import os
from kombu import Queue
from kombu.utils.url import safequote


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
FRAMEWORK = os.environ.get("FRAMEWORK") if os.environ.get("FRAMEWORK") else 'dev'
IS_ZAPPA = FRAMEWORK.lower() == "zappa"

if not IS_ZAPPA:
    env = environ.Env(
        # set casting, default value
        DEBUG=(bool, False),
    )
    environ.Env.read_env(os.path.join(BASE_DIR, ".env"))
else:
    envs = {k: (type(val), val) for k, val in os.environ.items()}
    env = environ.Env(**envs)
    print("a Zappa deployment.")



DB_NAME = env.str("DB_NAME")
DB_USER = env.str("DB_USER")
DB_PASSWORD = env.str("DB_PASSWORD")
DB_HOST = env.str("DB_HOST")
DB_PORT = env.int("DB_PORT")

# Build paths inside the project like this: BASE_DIR / 'subdir'.


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-n^)7z)s)w5qiu_w85dtmud@#-a0-h6x)5n@#@#ljvvv79z!c0u"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "0.0.0.0",
    "localhost",
    "sycs1nbhvj.execute-api.us-east-1.amazonaws.com",
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://0.0.0.0:8000",
    "https://localhost:8000",
    "https://0.0.0.0:8000",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # ours
    "notifier.apps.NotifierConfig",
    # 3rd party
    "rest_framework",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "brew_notifier.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "brew_notifier.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": DB_NAME,
        "USER": DB_USER,
        "PASSWORD": DB_PASSWORD,
        "HOST": DB_HOST,
        "PORT": DB_PORT,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "static")
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

STATIC_URL = ('/notifier' if IS_ZAPPA else '') + "/static/"
WHITENOISE_STATIC_PREFIX = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# test runner
TEST_RUNNER = "brew_notifier.test_runner.PytestTestRunner"

aws_access_key = safequote(env("AWS_ACCESS_KEY_ID"))
aws_secret_key = safequote(env("AWS_SECRET_ACCESS_KEY"))
# celery
CELERY_accept_content = ["application/json"]
CELERY_task_serializer = "json"
CELERY_BROKER_URL = f"sqs://{aws_access_key}:{aws_secret_key}@"
# CELERY_BROKER_TRANSPORT_OPTIONS = {
#     "region": "ap-southeast-1",
#     'visibility_timeout': 7200,
#     'polling_interval': 1
# }
CELERY_result_backend = None
CELERY_TASK_QUEUES = [Queue("regular"), Queue("high-priority")]
CELERY_TASK_ROUTES = {
    "notifier.tasks.crawl_event": "regular",
    "notifier.tasks.connect_company_to_event": "high-priority",
}

# defining the logger

default_logger = logging.getLogger("default")
default_logger.setLevel(logging.INFO)

formatter = logging.Formatter("%(asctime)s:%(name)s:%(message)s")

STREAM = False
FILE = True

if FILE and not IS_ZAPPA:
    file_handler = logging.FileHandler("./notifier.log")
    file_handler.setFormatter(formatter)
    default_logger.addHandler(file_handler)

if STREAM or not IS_ZAPPA:
    stream_handler = logging.StreamHandler()
    stream_handler.setFormatter(formatter)
    default_logger.addHandler(stream_handler)
